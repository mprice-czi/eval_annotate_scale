load("@rules_python//python:defs.bzl", "py_binary")

# Intelligent preprocessing script
py_binary(
    name = "intelligent_preprocessing",
    srcs = ["intelligent_passage_preprocessing.py"],
    main = "intelligent_passage_preprocessing.py",
    visibility = ["//visibility:public"],
    data = [
        "//data:CLEAR.csv",
        "//configs:preprocessing_config.yaml",
    ],
    # Environment variables and Python packages from system conda environment
)

# Environment validation script
py_binary(
    name = "validate_environment",
    srcs = ["validate_environment.py"],
    main = "validate_environment.py",
    visibility = ["//visibility:public"],
    deps = [
        "//src:config_manager",
    ],
    data = [
        "//data:CLEAR.csv",
        "//configs:preprocessing_config.yaml",
    ],
)

# Bazel environment setup script
py_binary(
    name = "setup_bazel_env",
    srcs = ["setup_bazel_env.py"],
    main = "setup_bazel_env.py",
    visibility = ["//visibility:public"],
)

# Setup development environment script
py_binary(
    name = "setup_preprocessing",
    srcs = ["setup_preprocessing.py"],
    main = "setup_preprocessing.py",
    visibility = ["//visibility:public"],
    deps = [
        "//src:config_manager",
    ],
)

# CLEAR.csv record count verification script
py_binary(
    name = "verify_clear_count",
    srcs = ["verify_clear_count.py"],
    main = "verify_clear_count.py",
    visibility = ["//visibility:public"],
    data = [
        "//data:CLEAR.csv",
    ],
)

# Demo processing pipeline (no API calls)
py_binary(
    name = "demo_processing",
    srcs = ["demo_processing.py"],
    main = "demo_processing.py",
    visibility = ["//visibility:public"],
    deps = [
        "//src:bazel_utils",
    ],
    data = [
        "//data:CLEAR.csv",
    ],
)

# Stage 1: Passage segmentation with caching and recovery
py_binary(
    name = "segment_passages",
    srcs = ["segment_passages.py"],
    main = "segment_passages.py",
    visibility = ["//visibility:public"],
    deps = [
        "//src:config_manager",
        "//src:bazel_utils",
    ],
    data = [
        "//data:CLEAR.csv",
        "//configs:preprocessing_config.yaml",
    ],
)

# Stage 2: Marginal pair generation
py_binary(
    name = "generate_marginal_pairs",
    srcs = ["generate_marginal_pairs.py"],
    main = "generate_marginal_pairs.py",
    visibility = ["//visibility:public"],
    deps = [
        "//src:config_manager",
        "//src:bazel_utils",
        "//src:statistical_pair_filter",
    ],
    data = [
        "//configs:preprocessing_config.yaml",
    ],
)

# Test script for statistical filtering
py_binary(
    name = "test_statistical_filtering",
    srcs = ["test_statistical_filtering.py"],
    main = "test_statistical_filtering.py", 
    visibility = ["//visibility:public"],
    deps = ["//src:statistical_pair_filter"],
)

# Scalability test for statistical filtering
py_binary(
    name = "test_scalability",
    srcs = ["test_scalability.py"],
    main = "test_scalability.py",
    visibility = ["//visibility:public"],
    deps = ["//src:statistical_pair_filter"],
)
